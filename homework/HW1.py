# Задача 1
# Сформировать список из N членов последовательности.
# Для N = 5: 1, -3, 9, -27, 81 и т.д.
def Ex1 ():
    print("Введите число N:")
    N = int(input())
    list = [1]
    for i in range(1, N):
        list.append((-3)**i)
    print(list)

#Ex1()



# Задача 2
# Пользователь задаёт две строки. Определить количество вхождений одной строки в другой.

def Ex2():
    print ("Введите первую строку:")
    string1 = input()
    print ("Введите вторую строку:")
    string2 = input()
    n1 = len(string1)
    n2 = len(string2)
    counter = 0

    for i in range(0, n2):
        if string1==string2[i:i+n1]:
            counter+=1
            i+=n1

    print (f"Первая строка входит во вторую {counter} раз")

# Ex2()


# Подсчитать сумму цифр в вещественном числе.
def Ex3():
    number = int(input())

    sum = 0
    while (number*10)!=(round(number*10)):
        number*=10
    number*=10

    while (round(number)>0):
        sum+=round(number%10)
        number=round(number//10)
    print(sum)

#Ex3()


# Написать программу получающую набор произведений чисел от 1 до N.
# Пример: пусть N = 4, тогда
# [ 1, 2, 6, 24 ]

def Ex4 ():
    print("Введите число N:")
    N = int(input())
    list = [1]
    for i in range(1, N+1):
        list.append(i*list[i-1])
    list.pop(0)
    print(list)

# Ex4 ()

# 1. Написать функцию write_in_morse, которая принимает строку 
# на английском языке и возвращает ее перевод на символьный язык Морзе. Ввод не должен зависеть от регистра.
def write_in_morse ():
    print("Введите строку:")
    string = input()
    string2 = ""
    char_to_dots = {
  'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
  'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
  'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
  'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
  'Y': '-.--', 'Z': '--..', 'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',
  'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
  'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',
  's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
  'y': '-.--', 'z': '--..', ' ': ' ', '0': '-----',
  '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
  '6': '-....', '7': '--...', '8': '---..', '9': '----.',
  '&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
  ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
  '-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.'
}

    for i in range(0, len(string)):
        string2 += char_to_dots.get(string[i])
    print(string2)

# write_in_morse ()


# 2. Есть такая вещь - палиндром. Это когда слово читается с обеих сторон одинаково. Например, слово "шалаш". 
# Также есть числовой палиндром. Если при обратном чтении числа (124 - 421) не получается то же самое, 
# то они складываются (124+421) и проверяются вновь. 
# Попробуйте написать функцию (или просто программу, но лучше все же функцию), находящую числовой палиндром.

def Palindrom ( number ):
    mul = 10
    count = 0
    number2 = number
    while number2//10>0:
        count += number2%10
        count*=10
        number2//=10
    count += number2%10
    print(f"{number} и {count}")
    if number == count:
        print(f"Число {number} является палиндромом")
    else:
        count += number
        Palindrom ( count )

# Palindrom (int(input()))

